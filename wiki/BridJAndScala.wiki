#summary Details on accommodations for Scala made in BridJ

= Introduction =

BridJ is a Java `<->` C / C++ / Objective-C / C# interop library.

This means Java the language but also more widely the JVM and its hosted languages.

This page describes what was done in BridJ to specifically ease up use from Scala.

= Pointer =

BridJ's pointer was designed to behave like a list, so provided you import `scala.collection.JavaConversions._` you'll already feel at home.

However, it still features `apply` and `update` methods, partly to avoid having to use `JavaConversions` (for instance in pre-2.8.x Scala, where it does not exist) and partly to allow for `Long` index instead of `java.util.List.get(int)`'s limited `Int` index.

= Structs = 

When using JNAerator to create BridJ structs, you can use the `-scalaSetters` switch to generate setters in the form `MyStruct.myField_=` that are treated like setters by Scala.

These setters do not replace the usual generated setters, they're final and just call the usual setters.

C struct and code :
{{{
typedef struct S {
    int a;
    double d;
} S;

S s;
s.a = 10;
s.d = 10.0;
}}}

Java code :
{{{
S s = new S().a(10).d(10.0)
}}}

Scala code :
{{{
val s = new S.a(10).d(10.0)
// or :
val s = new S
s.a = 10
s.d = 10.0
}}}