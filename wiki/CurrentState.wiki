#summary Current State of the BridJ project
#labels Featured

= Supported Platforms =

Binaries are currently available and routinely tested for the following platforms :
  * Windows (32 & 64 bits)
  * MacOS X (Universal : PPC, Intel 32 & 64 bits) ; only tested in 64 bits mode so far
  * Linux (32 bits)
(plans are to support Linux 64 bits and FreeBSD 32/64 soon)

= Working Features =

  * thread-safe design (including reentrant calls)
  * [http://jnaerator.googlecode.com/ JNAerator] support on par with JNA's
  * C functions calls with __cdecl and __stdcall conventions
  * C++ method calls (including virtual methods)
  * lazy signatures annotation support (exact symbols are optional)
  * Call C callbacks from Java and call Java-implemented callbacks from C
  * Complete Pointer API (with typed opaque pointers, array accessible + iterable reified generic Pointer base class...)
  * Type-safe enums (ValuedEnum + FlagSet classes) : unifies singleton and multi-flags patterns
  * COM object creation and calls (tested on Win 64 bits only)
  * lightweight and fast structs (no memory duplication nor update issues between Java and the native side)

= Known limitations =

  * destructors are not yet called on C++ classes
  * only default C++ constructors are supported so far (not those with arguments)
  * structs by value not supported yet (neither as function arguments nor as function return values)
  * requires Java 1.5 or more recent (if you need 1.4 compatibility, you shoud JNA instead)

= Features in progress = 

  * assembly-optimized raw calls (for Win32, Win64, Mac64) : mac ok except for floats/doubles
  * finish C++ classes :
    * support fields (mix existing code for structs)
    * call destructors from finalize() when appropriate
    * call arbitrary constructors (with args)
    * subclassing from Java (virtual __thiscall and __fastcall callbacks, vtable synthetization)
  * C++ templates for functions and classes (combination of generics and extra args/fields for types reification and last-minute lookup of actual symbols)
  * generic callback types (`Func0<R>`, `Func1<R, A1>`...)
  * varargs
  * ObjectiveC methods calls (objc_msgSend) : hope to draw interest from Rococoa developers

= Planned features = 

  * pass and return structs by value
  * COM JNAeration
  * *some* amount of built-in support for STL types (strings and vector at least, in debug/release mode, for GNU's STL, STLPort and MS VC++9's STL)
  * Full MFC Runtime (with annotations-based message map creation)
  * Mono/CLR interop (see [http://ochafik.free.fr/blog/?p=165 my previous hack])
  * MS/.NET interop
  * reverse-engineering helper (struct sizes guesses can be eased up a bit, and there's already a good demangler)

= Dynamic Library dependencies =

On Windows :
- C runtime + DbgHelp

On MacOS X :
- C runtime + libobjc + pthreads

On other Unix platforms : 
- C runtime + pthreads

= Features Not Planned / Ruled Out =

Why limiting the scope of this project so early ?

Err... ok, BridJ will *never* make coffee.