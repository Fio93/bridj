#summary C++ support in BridJ
#sidebar TOCWiki
<wiki:toc max_depth="3" />

Please see [CurrentState].

= Example of C++ class =

Let's use the following C++ class throughout this page :
{{{
#ifndef TEST_EXPORT
#define TEST_EXPORT
#endif
class TEST_EXPORT TestClass {
public:
    virtual ~TestClass();
    virtual int testVirtualAdd(int a, int b);
};
}}}

Its BridJ bindings are easy to write, but it is advised to use [http://code.google.com/p/jnaerator/ JNAerator] to create them, nevertheless :
{{{
import org.bridj.*;
import static org.bridj.Pointer.*;

public static class TestClass extends CPPObject {
	@Virtual(0) 
	public native int testVirtualAdd(int a, int b);
};
}}}

= Runtime support =

Supported compilers :
  * GCC 4.x (& Intel C++ Compiler)
  * Visual C++ 9.0

Supported platforms : all of BridJ's supported platforms (see [CurrentState]).

= Language support

Supported features :
  * Creating C++ class instances :
{{{
TestClass test = new TestClass();
Pointer<TestClass> pTest = pointerTo(test);
}}}
  * Calling C++ methods (including virtual and static ones, varargs) :
{{{
int result = test.testVirtualAdd(1, 2);
}}}
  * Experimental support for C++ class templates
  * Subclassing C++ classes from Java, with virtual methods overrides :
  And you can now derive from `TestClass` in Java very naturally :
{{{
TestClass test = new TestClass() {
	@Override
	public int testVirtualAdd(int a, int b) {
		return a + b;
	}
};
}}}
  The only known limitation so far is that you cannot call super.testVirtualAdd from the overridden method yet (but this is worked on and should be possible in the next release).

See [TypeMapping] for more details.