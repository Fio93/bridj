#summary How to build BridJ
#labels Featured
#sidebar TOCWiki
<wiki:toc max_depth="3" />

BridJ is built as part of the NativeLibs4Java sub-projects.

= Build BridJ only =

If the following steps do not succeed, please read the next section "Full build"
  * First, [http://maven.apache.org/download.html install Maven 3.x]
  * Please make sure you've set the git [http://help.github.com/line-endings/ autocrlf option] to true :
{{{
git config --global core.autocrlf true
}}}
  * Fork and/or clone the [https://github.com/ochafik/nativelibs4java NativeLibs4Java Github repository]
  * Go to the libraries/BridJ folder :
    {{{
cd nativelibs4java
cd libraries
cd BridJ
}}}
  * Run the following Maven command :
    {{{
mvn clean install -DskipTests
}}}

= Full build (first time) =

This will build all of NativeLibs4Java's projects, including JNAerator.
It will take some time, so you'll want to have a coffee during the build (if you've never used Maven before, this can take up to 15 minutes, so that might be enough for two coffees).

Subsequent builds will be much quicker (see next section), and can be launched from your Maven-aware IDE of choice.

  * First, [http://maven.apache.org/download.html install Maven 3.x]
  * Please make sure you've set the git [http://help.github.com/line-endings/ autocrlf option] to true :
{{{
git config --global core.autocrlf true
}}}
  * Fork and/or clone the [https://github.com/ochafik/nativelibs4java NativeLibs4Java Github repository]
  * Go to the libraries folder :
    {{{
cd nativelibs4java/libraries
}}}
  * Run the following Maven command :
    {{{
mvn install -DskipTests
}}}

BridJ's JARs are in `Bridj/target` (pick `bridj-x.x-SNAPSHOT.jar` if you don't have specific size needs).

|| JAR File || C || C++ || Objective-C || COM || MFC || .NET || Windows (x86, x64) || MacOS X (universal) || Linux (x86, x64) || Solaris (x86) || Android (arm) ||
|| `bridj-x.x-SNAPSHOT.jar` || x || x || x || x || x || x || x || x || x || x || ||
|| `bridj-x.x-SNAPSHOT-c-only.jar` || x ||  ||  ||  ||  ||  || x || x || x || x || ||
|| `bridj-x.x-SNAPSHOT-windows-only.jar` || x || x ||  || x || x || x || x ||  ||  ||  || ||
|| `bridj-x.x-SNAPSHOT-unix-only.jar` || x || x || x ||  ||  ||  ||  || x || x || x || ||
|| `bridj-x.x-SNAPSHOT-linux-only.jar` || x || x ||  ||  ||  ||  ||  ||  || x ||  || ||
|| `bridj-x.x-SNAPSHOT-macosx-only.jar` || x || x || x ||  ||  ||  ||  || x ||  ||  ||  ||
|| `bridj-x.x-SNAPSHOT-android.jar` || x || x ||  ||  ||  ||  ||  ||  ||  ||  || x ||


= Incremental build =

{{{
cd BridJ
mvn clean install
}}}

= Building BridJ's native library =

BridJ depends on [http://dyncall.org Dyncall], so you'll need to check it out and apply some BridJ-specific patches (beware: DYNCALL_HOME must point to the dyncall directory inside the dyncall directory the following command checks out) :
{{{
svn co https://dyncall.org/svn/dyncall/trunk dyncall
export DYNCALL_HOME=pathToDyncall/dyncall
cd dyncall
patch < pathToBridJ/src/main/cpp/bridj/dyncall.patch
}}}
You may need to clean the patch up for it to apply correctly. Also note that during some build process above dyncall.patch might be overwritten. To get the original patch in the source tree, run this :
{{{
git checkout pathToBridJ/src/main/cpp/bridj/dyncall.patch
}}}

Then you can build BridJ's shared library (and its test library) :
  * On Unix/Linux/MacOS X :
  {{{
cd BridJ
sh CleanNative ; sh BuildNative
}}}
  * On Windows (you can double-click on both scripts from Windows explorer instead of using the command line) :
  {{{
cd BridJ
CleanNative
BuildNative
}}}

If it's not a platform already supported by BridJ, you must :
  * update BridJ's Java machinery so it can find your binary at runtime (search for `getEmbeddedLibraryResource` in [https://github.com/ochafik/nativelibs4java/blob/master/libraries/BridJ/src/main/java/org/bridj/Platform.java Platform.java])
  * in case the build fails : update dyncall's configure script and/or update BridJ's [https://github.com/ochafik/nativelibs4java/blob/master/libraries/BridJ/src/main/cpp/bridj/Make.sh Make.sh] script

To run the tests on your new binary :
{{{
mvn test
}}}

= About BridJ's source code =

BridJ contains Java and C code.

Some of its sources are autogenerated from Velocity templates. For instance, all the Pointer.getInt, .setInt, getFloat, .setFloat... are generated automatically from a template.

So if you look for Pointer.java and JNI.java, they're not directly in the source control : they're created during the Maven build from their template located in `src/main/velocity`.

Likewise, some test classes are autogenerated, which helps cover more cases with less code (there's even autogenerated C functions in the test library, that are matched by the corresponding autogenerated test cases on the Java side).