#summary Details on how BridJ looks up binary files
<wiki:toc max_depth="3" />

= External binaries =

== Lookup paths ==

BridJ needs to know where to find binaries. 

Depending on the platform, the following environment variables are used as lookup paths :
  * `PATH`
  * `LD_LIBRARY_PATH`
  * `DYLD_LIBRARY_PATH`

The following Java properties are also used :
  * `java.library.path`
  * `gnu.classpath.boot.library.path`

The following paths are also used :
  * `.`
  * `${java.home}/bin`
  * `${java.home}/../Libraries` on MacOS X

== Explicit paths ==

For a given library with name `Xyz`, BridJ uses the environment variable BRIDJ_XYZ_LIBRARY or the property `bridj.Xyz.library` for explicit full path of the library binary file.

An explicit library file can also be set programmatically with <a href="http://nativelibs4java.sourceforge.net/bridj/api/stable/org/bridj/BridJ.html#setNativeLibraryFile(java.lang.String, java.io.File)">BridJ.setNativeLibraryFile</a>.

== Library aliases and actual name ==

The actual name of a library might be platform-dependent.

For instance the "C" library is actually named `mscvrt.dll` on Windows. This is supported by BridJ through <a href="http://nativelibs4java.sourceforge.net/bridj/api/stable/org/bridj/BridJ.html#setNativeLibraryActualName(java.lang.String, java.lang.String)">BridJ.setNativeLibraryActualName</a>.

Likewise, you can define aliases for libraries with <a href="http://nativelibs4java.sourceforge.net/bridj/api/stable/org/bridj/BridJ.html#addNativeLibraryAlias(java.lang.String, java.lang.String)">BridJ.addNativeLibraryAlias</a>.

= Binaries embedded in JARs =

Embedded resources are extracted from paths of the form :

`embeddedResourceRoot` / `platformName` / `binaryName`

Details on each part of this path are in the following sub-sections :

== Embedded resource roots ==

Predefined embedded resource roots are `lib` and `org/bridj/lib`.

Additional resource roots can be added with [http://nativelibs4java.sourceforge.net/bridj/api/stable/org/bridj/Platform.html#addEmbeddedLibraryResourceRoot(java.lang.String) BridJ.addEmbeddedLibraryResourceRoot].

== Binary names ==

Binary name for library `Xyz` will be `libXyz.so`, `libXyz.dylib`, `Xyz.so` or `Xyz.dll` depending on the platform.

== Platform names and example resource paths ==

Platform names are as follows :
|| Platform name || Platform description || Example resource path for library `Xyz` ||
|| `win32` || Window x86 (32 bits) || `lib/win32/Xyz.dll` ||
|| `win64` || Window x64 (64 bits) || `lib/win64/Xyz.dll` ||
|| `linux_x86` || Linux x86 (32 bits) || `lib/linux_x86/libXyz.so` ||
|| `linux_x64` || Linux amd64 (64 bits) || `lib/linux_x64/libXyz.so` ||
|| `sunos_x86` || Solaris x86 (32 bits) || `lib/sunos_x86/Xyz.so` ||
|| `darwin_universal` || MacOS X (x86 / x64 / ppc) || `lib/darwin_universal/libXyz.dylib` ||
|| `iphoneos_arm32_arm` || iOS (iPhone / iPad) arm || `lib/iphoneos_arm32_arm/libXyz.dylib` ||

Please see [https://github.com/ochafik/nativelibs4java/tree/master/libraries/Runtime/BridJ/src/main/resources/org/bridj/lib BridJ's sources] for an up-to-date list of platform names.

The exception is Android, where the only embedded resource root is 'lib' :
|| Platform name || Plarform description || Example resource path for library `Xyz` ||
|| `armeabi` || Android arm || `lib/armeabi/libXyz.so` ||